// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/borysbabii/Go-Clean-Architecture-REST-API/internal/models"
	utils "github.com/borysbabii/Go-Clean-Architecture-REST-API/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetCurrencies mocks base method.
func (m *MockUseCase) GetCurrencies(ctx context.Context, pq *utils.PaginationQuery) (*models.CurrenciesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencies", ctx, pq)
	ret0, _ := ret[0].(*models.CurrenciesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencies indicates an expected call of GetCurrencies.
func (mr *MockUseCaseMockRecorder) GetCurrencies(ctx, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencies", reflect.TypeOf((*MockUseCase)(nil).GetCurrencies), ctx, pq)
}
